{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","services/persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Persons","persons","personsService","setPersons","setNewMessage","setType","handleClick","event","preventDefault","pId","target","value","window","confirm","remove","then","setTimeout","getAll","catch","error","console","log","map","obj","key","id","name","number","type","onClick","PersonForm","props","onSubmit","every","item","localeCompare","newName","nameObject","newNumber","setNewName","setNewNumber","create","returnedPerson","concat","response","data","person","filter","includes","newObject","update","onChange","Filter","setNewSorted","pat","toLowerCase","url","axios","get","post","put","delete","Notification","message","template","background","fontSize","borderStyle","borderRadius","padding","marginBottom","align","style","color","App","useState","sorted","useEffect","initialPersons","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2eee7220.chunk.js","sourcesContent":["import React from 'react';\n\nconst Persons = ({persons, personsService, setPersons, setNewMessage, setType}) => {\n  const handleClick = (event) => {\n    event.preventDefault()\n    const pId = event.target.value\n    if(window.confirm(`Do you want to delete this record?`)){\n      personsService\n        .remove(pId)\n        .then(() => {\n          setNewMessage(`Record has been deleted from the server`)\n          setType(false)\n          setTimeout(()=>{\n            setNewMessage(null)\n          }, 5000)\n        })\n        .then(personsService.getAll().then(persons => {\n          setPersons(persons)\n        })\n        )\n        .catch(error=>{\n          setNewMessage(`Record has already been deleted from the server`)\n          setType(false)\n          setTimeout(()=>{\n            setNewMessage(null)\n          }, 5000)\n          console.log(\"failed to delete\")\n        })\n      }\n    console.log(\"canceled event\")\n  }\n  return(\n    <div>\n      <ul>\n        {persons.map(obj =>\n          <div key={obj.id}>\n          <li> {obj.name}: {obj.number}</li>\n          <button type=\"submit\" name = {obj.name} value = {obj.id} onClick={handleClick}>Delete</button>\n          </div>\n        )}\n      </ul>\n    </div>\n\n  )\n}\nexport default Persons;\n","import React from 'react';\n\nconst PersonForm = (props) => {\n\n  const addRecord = (event) => {\n    event.preventDefault()\n    const unique = props.persons.every(item =>\n          item.name.localeCompare(props.newName)\n    )\n    if (unique){\n      const nameObject = {\n        name: props.newName,\n        number: props.newNumber\n      }\n      props.setNewName('')\n      props.setNewNumber('')\n      props.personsService\n        .create(nameObject)\n        .then(returnedPerson => {\n          props.setNewMessage(\n            `Added ${nameObject.name}`\n          )\n          props.setType(true)\n          setTimeout(()=>{\n            props.setNewMessage(null)\n          }, 5000)\n          props.setPersons(props.persons.concat(returnedPerson))\n        })\n        .catch(error => {\n          props.setNewMessage(\"Minimum length for name is 3 and for number 8 digits\")\n          props.setType(false)\n          console.log(error.response.data)\n        })\n    }\n    else{\n      if (window.confirm(`${props.newName} is already in the phonebook, replace the old number with the new one?`)){\n        const person = props.persons.filter(obj=> obj.name.includes(props.newName))\n        const id = person[0].id\n        const newObject = {...person[0], number: props.newNumber}\n        props.personsService\n          .update(id, newObject)\n          .then(response =>{\n            props.setNewMessage(\n              `Changed ${newObject.name} number to ${props.newNumber}`\n            )\n            props.setType(true)\n            setTimeout(()=>{\n              props.setNewMessage(null)\n            }, 5000)\n            props.setPersons(props.persons.map(obj => obj.id!==id ? obj : response))\n          })\n          .catch(error => {\n            props.setNewMessage(\n              `${newObject.name} has already been deleted from server`\n            )\n            console.log(error.response.data)\n            props.setType(false)\n            setTimeout(()=>{\n              props.setNewMessage(null)\n            }, 5000)\n          })\n      }\n      props.setNewName('')\n      props.setNewNumber('')\n    }\n  }\n\n  const handleChange = (event) => {\n    props.setNewName(event.target.value)\n  }\n  const handlePhone = (event) => {\n    props.setNewNumber(event.target.value)\n  }\n  return(\n    <form onSubmit={addRecord}>\n      <div>name: <input value={props.newName} onChange={handleChange}/></div>\n      <div>phone: <input value={props.newNumber} onChange={handlePhone}/></div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )}\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Filter = ({persons, setNewSorted}) => {\n\n  const handleChange = (event) => {\n    const pat = event.target.value.toLowerCase()\n    event.preventDefault()\n    const copy = persons\n    setNewSorted(\n      copy.filter(person => person.name.toLowerCase().includes(pat)))\n  }\n  return(\n    <div>filter shown with: <input onChange={handleChange}/></div>\n  )\n}\n\nexport default Filter;\n","import axios from 'axios'\n\n\nconst url = '/api/persons'\nconst getAll = () => {\n  const request = axios.get(url)\n  return request.then(response => response.data)\n}\nconst create = newObject =>{\n  const request = axios.post(url, newObject)\n  return request.then(response => response.data)\n}\nconst update = (id, newObject) => {\n  const request = axios.put(`${url}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${url}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default {getAll, create, update, remove}\n","import React from 'react'\n\nconst Notification = ({message, type}) =>{\n\n  const template = {\n      background: 'lightgrey',\n      fontSize: 20,\n      borderStyle: 'solid',\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10,\n      align: 'center'\n  }\n  const style = type ? {...template, color:'green'}:{...template, color:'red'}\n\n  if (message===\"\" || message ===null){\n    return null\n  }\n  return(\n    <div style={style}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport PersonForm from './components/PersonForm';\nimport Filter from './components/Filter';\nimport personsService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ sorted, setNewSorted ] = useState([...persons])\n  const [ message, setNewMessage ] = useState(\"\")\n  const [ type, setType ] = useState(true) //the type of the message to be displayed\n\n  useEffect(() => {\n    personsService\n    .getAll()\n    .then(initialPersons=>{\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification type={type} message={message} />\n      <Filter persons = {persons} setNewSorted={setNewSorted}/>\n      <h2>Add new record</h2>\n      <PersonForm\n      persons={persons} setPersons={setPersons}\n      newNumber={newNumber} setNewNumber={setNewNumber}\n      newName={newName} setNewName={setNewName}\n      personsService={personsService} setNewMessage={setNewMessage}\n      setType={setType}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={sorted} setType={setType} setNewMessage={setNewMessage}\n       personsService={personsService} setPersons = {setPersons}/>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}